
testserialmain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000946  000009ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000946  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006c  0080011a  00000960  000009d4  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  000009d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000139  00000000  00000000  00000a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003f1  00000000  00000000  00000b4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001f4  00000000  00000000  00000f3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000366  00000000  00000000  00001132  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00001498  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000174  00000000  00000000  00001548  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009a  00000000  00000000  000016bc  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  78:	0c 94 19 01 	jmp	0x232	; 0x232 <__vector_30>
  7c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__vector_31>
  80:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

0000008c <CLR>:
  8c:	1b 5b 48 1b 5b 32 4a 00                             .[H.[2J.

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e6 e4       	ldi	r30, 0x46	; 70
  a8:	f9 e0       	ldi	r31, 0x09	; 9
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	aa 31       	cpi	r26, 0x1A	; 26
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	11 e0       	ldi	r17, 0x01	; 1
  bc:	aa e1       	ldi	r26, 0x1A	; 26
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a6 38       	cpi	r26, 0x86	; 134
  c6:	b1 07       	cpc	r27, r17
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  ce:	0c 94 a1 04 	jmp	0x942	; 0x942 <_exit>

000000d2 <__bad_interrupt>:
  d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <main>:


#include "serial.h"

int main(void)
{
  d6:	0e 94 7e 00 	call	0xfc	; 0xfc <init_usart1>
    init_usart1();
    
    printf("Reset: %x\n", MCUCSR);
  da:	84 b7       	in	r24, 0x34	; 52
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	9f 93       	push	r25
  e0:	8f 93       	push	r24
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	9f 93       	push	r25
  e8:	8f 93       	push	r24
  ea:	0e 94 a1 01 	call	0x342	; 0x342 <printf>
  ee:	0f 90       	pop	r0
  f0:	0f 90       	pop	r0
  f2:	0f 90       	pop	r0
  f4:	0f 90       	pop	r0
    return 0; 

  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	08 95       	ret

000000fc <init_usart1>:

static FILE mijnstdout = FDEV_SETUP_STREAM(mijn_uart_putchar, mijn_uart_getchar,
                                             _FDEV_SETUP_RW);

void init_usart1(void)
{
  fc:	10 92 7f 01 	sts	0x017F, r1
    inptr  = 0;
    outptr = 0;
 100:	10 92 3d 01 	sts	0x013D, r1
    tx_buff_empty = 1;
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	80 93 3b 01 	sts	0x013B, r24
    
    rx_inptr  = 0;
 10a:	10 92 3c 01 	sts	0x013C, r1
    rx_outptr = 0;
 10e:	10 92 1a 01 	sts	0x011A, r1
    rx_buff_empty = 1;
 112:	80 93 3e 01 	sts	0x013E, r24
    
    
    UCSR1C |= 0x06;
 116:	ed e9       	ldi	r30, 0x9D	; 157
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	86 60       	ori	r24, 0x06	; 6
 11e:	80 83       	st	Z, r24
    //disable while setting baud rate
    UCSR1B = 0x00; 
 120:	ea e9       	ldi	r30, 0x9A	; 154
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	10 82       	st	Z, r1
    UCSR1A = 0x00;
 126:	10 92 9b 00 	sts	0x009B, r1
    
    // 56700bps @  7.372800 MHz
    UBRR1L = 0x07; 
 12a:	87 e0       	ldi	r24, 0x07	; 7
 12c:	80 93 99 00 	sts	0x0099, r24
    UBRR1H = 0x00;
 130:	10 92 98 00 	sts	0x0098, r1
    
    // enable RX and TX
    UCSR1B |= (1 << TXEN1) | (1<<RXEN1); // RX enable, TX enable
 134:	80 81       	ld	r24, Z
 136:	88 61       	ori	r24, 0x18	; 24
 138:	80 83       	st	Z, r24
    UCSR1B |= (1 << RXCIE1);             // enable receive interrupt       
 13a:	80 81       	ld	r24, Z
 13c:	80 68       	ori	r24, 0x80	; 128
 13e:	80 83       	st	Z, r24
    
    // direct stdout to usart1
    stdout = &mijnstdout;
 140:	8b e0       	ldi	r24, 0x0B	; 11
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	90 93 83 01 	sts	0x0183, r25
 148:	80 93 82 01 	sts	0x0182, r24
}
 14c:	08 95       	ret

0000014e <mijn_uart_putchar>:
{
    puts_P(CLR);                                // Send a 'clear screen' to a VT100 terminal
}

int mijn_uart_putchar(char c, FILE *stream)
{
 14e:	28 2f       	mov	r18, r24
    //if (c == '\n')
    //    mijn_uart_putchar('\r',stream);
        
    // shutoff transmit interrupt while the variables are altered
    UCSR1B &= ~(1<<UDRIE1);
 150:	80 91 9a 00 	lds	r24, 0x009A
 154:	8f 7d       	andi	r24, 0xDF	; 223
 156:	80 93 9a 00 	sts	0x009A, r24
    
    if (UCSR1A & (1<<UDRE1) && (tx_buff_empty)) {
 15a:	80 91 9b 00 	lds	r24, 0x009B
 15e:	85 ff       	sbrs	r24, 5
 160:	07 c0       	rjmp	.+14     	; 0x170 <mijn_uart_putchar+0x22>
 162:	80 91 3b 01 	lds	r24, 0x013B
 166:	88 23       	and	r24, r24
 168:	19 f0       	breq	.+6      	; 0x170 <mijn_uart_putchar+0x22>
    // USART data register is empty
    // and buffer empty
      UDR1 = c;
 16a:	20 93 9c 00 	sts	0x009C, r18
 16e:	22 c0       	rjmp	.+68     	; 0x1b4 <mijn_uart_putchar+0x66>
  
    }
    else if (inptr!=outptr || tx_buff_empty)
 170:	90 91 7f 01 	lds	r25, 0x017F
 174:	80 91 3d 01 	lds	r24, 0x013D
 178:	98 17       	cp	r25, r24
 17a:	21 f4       	brne	.+8      	; 0x184 <mijn_uart_putchar+0x36>
 17c:	80 91 3b 01 	lds	r24, 0x013B
 180:	88 23       	and	r24, r24
 182:	c1 f0       	breq	.+48     	; 0x1b4 <mijn_uart_putchar+0x66>
    {
        UART_TX_buffer[inptr] = c;               // Put character into buffer
 184:	e0 91 7f 01 	lds	r30, 0x017F
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	e1 5c       	subi	r30, 0xC1	; 193
 18c:	fe 4f       	sbci	r31, 0xFE	; 254
 18e:	20 83       	st	Z, r18
        inptr++;                                 // Increment pointer
 190:	80 91 7f 01 	lds	r24, 0x017F
 194:	8f 5f       	subi	r24, 0xFF	; 255
 196:	80 93 7f 01 	sts	0x017F, r24
        tx_buff_empty = 0;
 19a:	10 92 3b 01 	sts	0x013B, r1
        
        
        if (inptr >= TX_BUFF_SIZE) // Pointer wrapping
 19e:	80 91 7f 01 	lds	r24, 0x017F
 1a2:	80 34       	cpi	r24, 0x40	; 64
 1a4:	10 f0       	brcs	.+4      	; 0x1aa <mijn_uart_putchar+0x5c>
            inptr = 0;
 1a6:	10 92 7f 01 	sts	0x017F, r1
        
        
        UCSR1B |= (1<<UDRIE1);                   // Enable
 1aa:	80 91 9a 00 	lds	r24, 0x009A
 1ae:	80 62       	ori	r24, 0x20	; 32
 1b0:	80 93 9a 00 	sts	0x009A, r24
                                                  // empty interrupt

        
    } 

    UCSR1B |= (1<<UDRIE1);                       // Enable
 1b4:	80 91 9a 00 	lds	r24, 0x009A
 1b8:	80 62       	ori	r24, 0x20	; 32
 1ba:	80 93 9a 00 	sts	0x009A, r24
                                                 // empty interrupt
    return 0;
}
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	08 95       	ret

000001c4 <__vector_31>:

// Interrupt driven transmitter

ISR (USART1_UDRE_vect)
{
 1c4:	1f 92       	push	r1
 1c6:	0f 92       	push	r0
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	0f 92       	push	r0
 1cc:	0b b6       	in	r0, 0x3b	; 59
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	8f 93       	push	r24
 1d4:	9f 93       	push	r25
 1d6:	ef 93       	push	r30
 1d8:	ff 93       	push	r31
    UDR1 = UART_TX_buffer[outptr];               // Send next byte
 1da:	e0 91 3d 01 	lds	r30, 0x013D
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	e1 5c       	subi	r30, 0xC1	; 193
 1e2:	fe 4f       	sbci	r31, 0xFE	; 254
 1e4:	80 81       	ld	r24, Z
 1e6:	80 93 9c 00 	sts	0x009C, r24
    outptr++;                                    // Increment pointer
 1ea:	80 91 3d 01 	lds	r24, 0x013D
 1ee:	8f 5f       	subi	r24, 0xFF	; 255
 1f0:	80 93 3d 01 	sts	0x013D, r24
    
    if (outptr >= TX_BUFF_SIZE)    // Pointer wrapping
 1f4:	80 91 3d 01 	lds	r24, 0x013D
 1f8:	80 34       	cpi	r24, 0x40	; 64
 1fa:	10 f0       	brcs	.+4      	; 0x200 <__vector_31+0x3c>
        outptr = 0;
 1fc:	10 92 3d 01 	sts	0x013D, r1

    if(inptr == outptr)  {                       // If buffer is empty:
 200:	90 91 7f 01 	lds	r25, 0x017F
 204:	80 91 3d 01 	lds	r24, 0x013D
 208:	98 17       	cp	r25, r24
 20a:	41 f4       	brne	.+16     	; 0x21c <__vector_31+0x58>
        UCSR1B &= ~(1<<UDRIE1);                  // disable transmitter empty interrupt
 20c:	80 91 9a 00 	lds	r24, 0x009A
 210:	8f 7d       	andi	r24, 0xDF	; 223
 212:	80 93 9a 00 	sts	0x009A, r24
        tx_buff_empty = 1;
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	80 93 3b 01 	sts	0x013B, r24
    }
}
 21c:	ff 91       	pop	r31
 21e:	ef 91       	pop	r30
 220:	9f 91       	pop	r25
 222:	8f 91       	pop	r24
 224:	0f 90       	pop	r0
 226:	0b be       	out	0x3b, r0	; 59
 228:	0f 90       	pop	r0
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	0f 90       	pop	r0
 22e:	1f 90       	pop	r1
 230:	18 95       	reti

00000232 <__vector_30>:



ISR (USART1_RX_vect)
{
 232:	1f 92       	push	r1
 234:	0f 92       	push	r0
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	0f 92       	push	r0
 23a:	0b b6       	in	r0, 0x3b	; 59
 23c:	0f 92       	push	r0
 23e:	11 24       	eor	r1, r1
 240:	8f 93       	push	r24
 242:	9f 93       	push	r25
 244:	ef 93       	push	r30
 246:	ff 93       	push	r31
    if (rx_inptr!=rx_outptr || rx_buff_empty)
 248:	90 91 3c 01 	lds	r25, 0x013C
 24c:	80 91 1a 01 	lds	r24, 0x011A
 250:	98 17       	cp	r25, r24
 252:	21 f4       	brne	.+8      	; 0x25c <__vector_30+0x2a>
 254:	80 91 3e 01 	lds	r24, 0x013E
 258:	88 23       	and	r24, r24
 25a:	a9 f0       	breq	.+42     	; 0x286 <__vector_30+0x54>
    {
        // sla character het buffer op
        UART_RX_buffer[rx_inptr] = UDR1;
 25c:	e0 91 3c 01 	lds	r30, 0x013C
 260:	80 91 9c 00 	lds	r24, 0x009C
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	e5 5e       	subi	r30, 0xE5	; 229
 268:	fe 4f       	sbci	r31, 0xFE	; 254
 26a:	80 83       	st	Z, r24

        // duid naar de naxte sloot aan
        rx_inptr++;                                
 26c:	80 91 3c 01 	lds	r24, 0x013C
 270:	8f 5f       	subi	r24, 0xFF	; 255
 272:	80 93 3c 01 	sts	0x013C, r24

        rx_buff_empty = 0;
 276:	10 92 3e 01 	sts	0x013E, r1

        // Pointer wrapping
        if (rx_inptr >= RX_BUFF_SIZE)   
 27a:	80 91 3c 01 	lds	r24, 0x013C
 27e:	80 32       	cpi	r24, 0x20	; 32
 280:	10 f0       	brcs	.+4      	; 0x286 <__vector_30+0x54>
            rx_inptr = 0;
 282:	10 92 3c 01 	sts	0x013C, r1


    } else {
        // zuvol
    }
}
 286:	ff 91       	pop	r31
 288:	ef 91       	pop	r30
 28a:	9f 91       	pop	r25
 28c:	8f 91       	pop	r24
 28e:	0f 90       	pop	r0
 290:	0b be       	out	0x3b, r0	; 59
 292:	0f 90       	pop	r0
 294:	0f be       	out	0x3f, r0	; 63
 296:	0f 90       	pop	r0
 298:	1f 90       	pop	r1
 29a:	18 95       	reti

0000029c <trek_teken_uit>:
    while (trek_teken_uit(&teken) == 0);
    return (int)teken;  
}    
    
char trek_teken_uit(char *teken) 
{
 29c:	dc 01       	movw	r26, r24
    char goed;
    
    // shut off receive interrupt whilst altering
    UCSR1B &= ~(1 << RXCIE1);
 29e:	80 91 9a 00 	lds	r24, 0x009A
 2a2:	8f 77       	andi	r24, 0x7F	; 127
 2a4:	80 93 9a 00 	sts	0x009A, r24
     
    if (!rx_buff_empty) {
 2a8:	80 91 3e 01 	lds	r24, 0x013E
 2ac:	88 23       	and	r24, r24
 2ae:	11 f0       	breq	.+4      	; 0x2b4 <trek_teken_uit+0x18>
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	1c c0       	rjmp	.+56     	; 0x2ec <trek_teken_uit+0x50>
       
        // Increment pointer
        *teken = UART_RX_buffer[rx_outptr];
 2b4:	e0 91 1a 01 	lds	r30, 0x011A
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	e5 5e       	subi	r30, 0xE5	; 229
 2bc:	fe 4f       	sbci	r31, 0xFE	; 254
 2be:	80 81       	ld	r24, Z
 2c0:	8c 93       	st	X, r24
        rx_outptr++; 
 2c2:	80 91 1a 01 	lds	r24, 0x011A
 2c6:	8f 5f       	subi	r24, 0xFF	; 255
 2c8:	80 93 1a 01 	sts	0x011A, r24
    
        // Pointer wrapping
        if (rx_outptr >= RX_BUFF_SIZE)  
 2cc:	80 91 1a 01 	lds	r24, 0x011A
 2d0:	80 32       	cpi	r24, 0x20	; 32
 2d2:	10 f0       	brcs	.+4      	; 0x2d8 <trek_teken_uit+0x3c>
            rx_outptr = 0;
 2d4:	10 92 1a 01 	sts	0x011A, r1
        //if outptr just moved to in so now buffer is empty 
        if (rx_inptr == rx_outptr)
 2d8:	90 91 3c 01 	lds	r25, 0x013C
 2dc:	80 91 1a 01 	lds	r24, 0x011A
 2e0:	98 17       	cp	r25, r24
 2e2:	19 f4       	brne	.+6      	; 0x2ea <trek_teken_uit+0x4e>
            rx_buff_empty = 1;
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	80 93 3e 01 	sts	0x013E, r24
 2ea:	91 e0       	ldi	r25, 0x01	; 1
    {
        goed = 0;
    }
    
    // reinstate receive interrupt
    UCSR1B |= (1 << RXCIE1);
 2ec:	80 91 9a 00 	lds	r24, 0x009A
 2f0:	80 68       	ori	r24, 0x80	; 128
 2f2:	80 93 9a 00 	sts	0x009A, r24
    return goed;
}
 2f6:	89 2f       	mov	r24, r25
 2f8:	08 95       	ret

000002fa <mijn_uart_getchar>:
        // zuvol
    }
}

int mijn_uart_getchar(FILE *stream)
{
 2fa:	0f 93       	push	r16
 2fc:	1f 93       	push	r17
 2fe:	df 93       	push	r29
 300:	cf 93       	push	r28
 302:	0f 92       	push	r0
 304:	cd b7       	in	r28, 0x3d	; 61
 306:	de b7       	in	r29, 0x3e	; 62
    char teken;
    //block until char rxed
    while (trek_teken_uit(&teken) == 0);
 308:	8e 01       	movw	r16, r28
 30a:	0f 5f       	subi	r16, 0xFF	; 255
 30c:	1f 4f       	sbci	r17, 0xFF	; 255
 30e:	c8 01       	movw	r24, r16
 310:	0e 94 4e 01 	call	0x29c	; 0x29c <trek_teken_uit>
 314:	88 23       	and	r24, r24
 316:	d9 f3       	breq	.-10     	; 0x30e <mijn_uart_getchar+0x14>
    return (int)teken;  
}    
 318:	89 81       	ldd	r24, Y+1	; 0x01
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0f 90       	pop	r0
 31e:	cf 91       	pop	r28
 320:	df 91       	pop	r29
 322:	1f 91       	pop	r17
 324:	0f 91       	pop	r16
 326:	08 95       	ret

00000328 <USART_Transmit>:
    UCSR1B |= (1 << RXCIE1);
    return goed;
}

void USART_Transmit( unsigned char data )
{
 328:	98 2f       	mov	r25, r24
  // Wait for empty transmit buffer
  while ( !( UCSR1A & (1<<UDRE1)) )
 32a:	80 91 9b 00 	lds	r24, 0x009B
 32e:	85 ff       	sbrs	r24, 5
 330:	fc cf       	rjmp	.-8      	; 0x32a <USART_Transmit+0x2>
  ;
  // Put data into buffer, sends the data
  UDR1 = data;
 332:	90 93 9c 00 	sts	0x009C, r25
 336:	08 95       	ret

00000338 <clr>:
    // direct stdout to usart1
    stdout = &mijnstdout;
}

void clr(void)
{
 338:	8c e8       	ldi	r24, 0x8C	; 140
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	0e 94 b6 01 	call	0x36c	; 0x36c <puts_P>
    puts_P(CLR);                                // Send a 'clear screen' to a VT100 terminal
}
 340:	08 95       	ret

00000342 <printf>:
 342:	a0 e0       	ldi	r26, 0x00	; 0
 344:	b0 e0       	ldi	r27, 0x00	; 0
 346:	e7 ea       	ldi	r30, 0xA7	; 167
 348:	f1 e0       	ldi	r31, 0x01	; 1
 34a:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <__prologue_saves__+0x20>
 34e:	fe 01       	movw	r30, r28
 350:	35 96       	adiw	r30, 0x05	; 5
 352:	61 91       	ld	r22, Z+
 354:	71 91       	ld	r23, Z+
 356:	af 01       	movw	r20, r30
 358:	80 91 82 01 	lds	r24, 0x0182
 35c:	90 91 83 01 	lds	r25, 0x0183
 360:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <vfprintf>
 364:	20 96       	adiw	r28, 0x00	; 0
 366:	e2 e0       	ldi	r30, 0x02	; 2
 368:	0c 94 96 04 	jmp	0x92c	; 0x92c <__epilogue_restores__+0x20>

0000036c <puts_P>:
 36c:	0f 93       	push	r16
 36e:	1f 93       	push	r17
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
 374:	ec 01       	movw	r28, r24
 376:	e0 91 82 01 	lds	r30, 0x0182
 37a:	f0 91 83 01 	lds	r31, 0x0183
 37e:	83 81       	ldd	r24, Z+3	; 0x03
 380:	81 ff       	sbrs	r24, 1
 382:	21 c0       	rjmp	.+66     	; 0x3c6 <puts_P+0x5a>
 384:	00 e0       	ldi	r16, 0x00	; 0
 386:	10 e0       	ldi	r17, 0x00	; 0
 388:	0e c0       	rjmp	.+28     	; 0x3a6 <puts_P+0x3a>
 38a:	e0 91 82 01 	lds	r30, 0x0182
 38e:	f0 91 83 01 	lds	r31, 0x0183
 392:	20 85       	ldd	r18, Z+8	; 0x08
 394:	31 85       	ldd	r19, Z+9	; 0x09
 396:	bf 01       	movw	r22, r30
 398:	f9 01       	movw	r30, r18
 39a:	09 95       	icall
 39c:	89 2b       	or	r24, r25
 39e:	11 f0       	breq	.+4      	; 0x3a4 <puts_P+0x38>
 3a0:	0f ef       	ldi	r16, 0xFF	; 255
 3a2:	1f ef       	ldi	r17, 0xFF	; 255
 3a4:	21 96       	adiw	r28, 0x01	; 1
 3a6:	fe 01       	movw	r30, r28
 3a8:	84 91       	lpm	r24, Z+
 3aa:	88 23       	and	r24, r24
 3ac:	71 f7       	brne	.-36     	; 0x38a <puts_P+0x1e>
 3ae:	e0 91 82 01 	lds	r30, 0x0182
 3b2:	f0 91 83 01 	lds	r31, 0x0183
 3b6:	20 85       	ldd	r18, Z+8	; 0x08
 3b8:	31 85       	ldd	r19, Z+9	; 0x09
 3ba:	bf 01       	movw	r22, r30
 3bc:	8a e0       	ldi	r24, 0x0A	; 10
 3be:	f9 01       	movw	r30, r18
 3c0:	09 95       	icall
 3c2:	89 2b       	or	r24, r25
 3c4:	11 f0       	breq	.+4      	; 0x3ca <puts_P+0x5e>
 3c6:	0f ef       	ldi	r16, 0xFF	; 255
 3c8:	1f ef       	ldi	r17, 0xFF	; 255
 3ca:	c8 01       	movw	r24, r16
 3cc:	df 91       	pop	r29
 3ce:	cf 91       	pop	r28
 3d0:	1f 91       	pop	r17
 3d2:	0f 91       	pop	r16
 3d4:	08 95       	ret

000003d6 <vfprintf>:
 3d6:	ab e0       	ldi	r26, 0x0B	; 11
 3d8:	b0 e0       	ldi	r27, 0x00	; 0
 3da:	e1 ef       	ldi	r30, 0xF1	; 241
 3dc:	f1 e0       	ldi	r31, 0x01	; 1
 3de:	0c 94 6a 04 	jmp	0x8d4	; 0x8d4 <__prologue_saves__>
 3e2:	3c 01       	movw	r6, r24
 3e4:	2b 01       	movw	r4, r22
 3e6:	5a 01       	movw	r10, r20
 3e8:	fc 01       	movw	r30, r24
 3ea:	17 82       	std	Z+7, r1	; 0x07
 3ec:	16 82       	std	Z+6, r1	; 0x06
 3ee:	83 81       	ldd	r24, Z+3	; 0x03
 3f0:	81 fd       	sbrc	r24, 1
 3f2:	03 c0       	rjmp	.+6      	; 0x3fa <vfprintf+0x24>
 3f4:	6f ef       	ldi	r22, 0xFF	; 255
 3f6:	7f ef       	ldi	r23, 0xFF	; 255
 3f8:	c8 c1       	rjmp	.+912    	; 0x78a <vfprintf+0x3b4>
 3fa:	9a e0       	ldi	r25, 0x0A	; 10
 3fc:	89 2e       	mov	r8, r25
 3fe:	1e 01       	movw	r2, r28
 400:	08 94       	sec
 402:	21 1c       	adc	r2, r1
 404:	31 1c       	adc	r3, r1
 406:	f3 01       	movw	r30, r6
 408:	23 81       	ldd	r18, Z+3	; 0x03
 40a:	f2 01       	movw	r30, r4
 40c:	23 fd       	sbrc	r18, 3
 40e:	85 91       	lpm	r24, Z+
 410:	23 ff       	sbrs	r18, 3
 412:	81 91       	ld	r24, Z+
 414:	2f 01       	movw	r4, r30
 416:	88 23       	and	r24, r24
 418:	09 f4       	brne	.+2      	; 0x41c <vfprintf+0x46>
 41a:	b4 c1       	rjmp	.+872    	; 0x784 <vfprintf+0x3ae>
 41c:	85 32       	cpi	r24, 0x25	; 37
 41e:	39 f4       	brne	.+14     	; 0x42e <vfprintf+0x58>
 420:	23 fd       	sbrc	r18, 3
 422:	85 91       	lpm	r24, Z+
 424:	23 ff       	sbrs	r18, 3
 426:	81 91       	ld	r24, Z+
 428:	2f 01       	movw	r4, r30
 42a:	85 32       	cpi	r24, 0x25	; 37
 42c:	29 f4       	brne	.+10     	; 0x438 <vfprintf+0x62>
 42e:	b3 01       	movw	r22, r6
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <fputc>
 436:	e7 cf       	rjmp	.-50     	; 0x406 <vfprintf+0x30>
 438:	98 2f       	mov	r25, r24
 43a:	dd 24       	eor	r13, r13
 43c:	cc 24       	eor	r12, r12
 43e:	99 24       	eor	r9, r9
 440:	ff e1       	ldi	r31, 0x1F	; 31
 442:	fd 15       	cp	r31, r13
 444:	d0 f0       	brcs	.+52     	; 0x47a <vfprintf+0xa4>
 446:	9b 32       	cpi	r25, 0x2B	; 43
 448:	69 f0       	breq	.+26     	; 0x464 <vfprintf+0x8e>
 44a:	9c 32       	cpi	r25, 0x2C	; 44
 44c:	28 f4       	brcc	.+10     	; 0x458 <vfprintf+0x82>
 44e:	90 32       	cpi	r25, 0x20	; 32
 450:	59 f0       	breq	.+22     	; 0x468 <vfprintf+0x92>
 452:	93 32       	cpi	r25, 0x23	; 35
 454:	91 f4       	brne	.+36     	; 0x47a <vfprintf+0xa4>
 456:	0e c0       	rjmp	.+28     	; 0x474 <vfprintf+0x9e>
 458:	9d 32       	cpi	r25, 0x2D	; 45
 45a:	49 f0       	breq	.+18     	; 0x46e <vfprintf+0x98>
 45c:	90 33       	cpi	r25, 0x30	; 48
 45e:	69 f4       	brne	.+26     	; 0x47a <vfprintf+0xa4>
 460:	41 e0       	ldi	r20, 0x01	; 1
 462:	24 c0       	rjmp	.+72     	; 0x4ac <vfprintf+0xd6>
 464:	52 e0       	ldi	r21, 0x02	; 2
 466:	d5 2a       	or	r13, r21
 468:	84 e0       	ldi	r24, 0x04	; 4
 46a:	d8 2a       	or	r13, r24
 46c:	28 c0       	rjmp	.+80     	; 0x4be <vfprintf+0xe8>
 46e:	98 e0       	ldi	r25, 0x08	; 8
 470:	d9 2a       	or	r13, r25
 472:	25 c0       	rjmp	.+74     	; 0x4be <vfprintf+0xe8>
 474:	e0 e1       	ldi	r30, 0x10	; 16
 476:	de 2a       	or	r13, r30
 478:	22 c0       	rjmp	.+68     	; 0x4be <vfprintf+0xe8>
 47a:	d7 fc       	sbrc	r13, 7
 47c:	29 c0       	rjmp	.+82     	; 0x4d0 <vfprintf+0xfa>
 47e:	89 2f       	mov	r24, r25
 480:	80 53       	subi	r24, 0x30	; 48
 482:	8a 30       	cpi	r24, 0x0A	; 10
 484:	70 f4       	brcc	.+28     	; 0x4a2 <vfprintf+0xcc>
 486:	d6 fe       	sbrs	r13, 6
 488:	05 c0       	rjmp	.+10     	; 0x494 <vfprintf+0xbe>
 48a:	98 9c       	mul	r9, r8
 48c:	90 2c       	mov	r9, r0
 48e:	11 24       	eor	r1, r1
 490:	98 0e       	add	r9, r24
 492:	15 c0       	rjmp	.+42     	; 0x4be <vfprintf+0xe8>
 494:	c8 9c       	mul	r12, r8
 496:	c0 2c       	mov	r12, r0
 498:	11 24       	eor	r1, r1
 49a:	c8 0e       	add	r12, r24
 49c:	f0 e2       	ldi	r31, 0x20	; 32
 49e:	df 2a       	or	r13, r31
 4a0:	0e c0       	rjmp	.+28     	; 0x4be <vfprintf+0xe8>
 4a2:	9e 32       	cpi	r25, 0x2E	; 46
 4a4:	29 f4       	brne	.+10     	; 0x4b0 <vfprintf+0xda>
 4a6:	d6 fc       	sbrc	r13, 6
 4a8:	6d c1       	rjmp	.+730    	; 0x784 <vfprintf+0x3ae>
 4aa:	40 e4       	ldi	r20, 0x40	; 64
 4ac:	d4 2a       	or	r13, r20
 4ae:	07 c0       	rjmp	.+14     	; 0x4be <vfprintf+0xe8>
 4b0:	9c 36       	cpi	r25, 0x6C	; 108
 4b2:	19 f4       	brne	.+6      	; 0x4ba <vfprintf+0xe4>
 4b4:	50 e8       	ldi	r21, 0x80	; 128
 4b6:	d5 2a       	or	r13, r21
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <vfprintf+0xe8>
 4ba:	98 36       	cpi	r25, 0x68	; 104
 4bc:	49 f4       	brne	.+18     	; 0x4d0 <vfprintf+0xfa>
 4be:	f2 01       	movw	r30, r4
 4c0:	23 fd       	sbrc	r18, 3
 4c2:	95 91       	lpm	r25, Z+
 4c4:	23 ff       	sbrs	r18, 3
 4c6:	91 91       	ld	r25, Z+
 4c8:	2f 01       	movw	r4, r30
 4ca:	99 23       	and	r25, r25
 4cc:	09 f0       	breq	.+2      	; 0x4d0 <vfprintf+0xfa>
 4ce:	b8 cf       	rjmp	.-144    	; 0x440 <vfprintf+0x6a>
 4d0:	89 2f       	mov	r24, r25
 4d2:	85 54       	subi	r24, 0x45	; 69
 4d4:	83 30       	cpi	r24, 0x03	; 3
 4d6:	18 f0       	brcs	.+6      	; 0x4de <vfprintf+0x108>
 4d8:	80 52       	subi	r24, 0x20	; 32
 4da:	83 30       	cpi	r24, 0x03	; 3
 4dc:	38 f4       	brcc	.+14     	; 0x4ec <vfprintf+0x116>
 4de:	44 e0       	ldi	r20, 0x04	; 4
 4e0:	50 e0       	ldi	r21, 0x00	; 0
 4e2:	a4 0e       	add	r10, r20
 4e4:	b5 1e       	adc	r11, r21
 4e6:	5f e3       	ldi	r21, 0x3F	; 63
 4e8:	59 83       	std	Y+1, r21	; 0x01
 4ea:	0f c0       	rjmp	.+30     	; 0x50a <vfprintf+0x134>
 4ec:	93 36       	cpi	r25, 0x63	; 99
 4ee:	31 f0       	breq	.+12     	; 0x4fc <vfprintf+0x126>
 4f0:	93 37       	cpi	r25, 0x73	; 115
 4f2:	79 f0       	breq	.+30     	; 0x512 <vfprintf+0x13c>
 4f4:	93 35       	cpi	r25, 0x53	; 83
 4f6:	09 f0       	breq	.+2      	; 0x4fa <vfprintf+0x124>
 4f8:	56 c0       	rjmp	.+172    	; 0x5a6 <vfprintf+0x1d0>
 4fa:	20 c0       	rjmp	.+64     	; 0x53c <vfprintf+0x166>
 4fc:	f5 01       	movw	r30, r10
 4fe:	80 81       	ld	r24, Z
 500:	89 83       	std	Y+1, r24	; 0x01
 502:	42 e0       	ldi	r20, 0x02	; 2
 504:	50 e0       	ldi	r21, 0x00	; 0
 506:	a4 0e       	add	r10, r20
 508:	b5 1e       	adc	r11, r21
 50a:	71 01       	movw	r14, r2
 50c:	01 e0       	ldi	r16, 0x01	; 1
 50e:	10 e0       	ldi	r17, 0x00	; 0
 510:	12 c0       	rjmp	.+36     	; 0x536 <vfprintf+0x160>
 512:	f5 01       	movw	r30, r10
 514:	e0 80       	ld	r14, Z
 516:	f1 80       	ldd	r15, Z+1	; 0x01
 518:	d6 fc       	sbrc	r13, 6
 51a:	03 c0       	rjmp	.+6      	; 0x522 <vfprintf+0x14c>
 51c:	6f ef       	ldi	r22, 0xFF	; 255
 51e:	7f ef       	ldi	r23, 0xFF	; 255
 520:	02 c0       	rjmp	.+4      	; 0x526 <vfprintf+0x150>
 522:	69 2d       	mov	r22, r9
 524:	70 e0       	ldi	r23, 0x00	; 0
 526:	42 e0       	ldi	r20, 0x02	; 2
 528:	50 e0       	ldi	r21, 0x00	; 0
 52a:	a4 0e       	add	r10, r20
 52c:	b5 1e       	adc	r11, r21
 52e:	c7 01       	movw	r24, r14
 530:	0e 94 d5 03 	call	0x7aa	; 0x7aa <strnlen>
 534:	8c 01       	movw	r16, r24
 536:	5f e7       	ldi	r21, 0x7F	; 127
 538:	d5 22       	and	r13, r21
 53a:	14 c0       	rjmp	.+40     	; 0x564 <vfprintf+0x18e>
 53c:	f5 01       	movw	r30, r10
 53e:	e0 80       	ld	r14, Z
 540:	f1 80       	ldd	r15, Z+1	; 0x01
 542:	d6 fc       	sbrc	r13, 6
 544:	03 c0       	rjmp	.+6      	; 0x54c <vfprintf+0x176>
 546:	6f ef       	ldi	r22, 0xFF	; 255
 548:	7f ef       	ldi	r23, 0xFF	; 255
 54a:	02 c0       	rjmp	.+4      	; 0x550 <vfprintf+0x17a>
 54c:	69 2d       	mov	r22, r9
 54e:	70 e0       	ldi	r23, 0x00	; 0
 550:	42 e0       	ldi	r20, 0x02	; 2
 552:	50 e0       	ldi	r21, 0x00	; 0
 554:	a4 0e       	add	r10, r20
 556:	b5 1e       	adc	r11, r21
 558:	c7 01       	movw	r24, r14
 55a:	0e 94 ca 03 	call	0x794	; 0x794 <strnlen_P>
 55e:	8c 01       	movw	r16, r24
 560:	50 e8       	ldi	r21, 0x80	; 128
 562:	d5 2a       	or	r13, r21
 564:	d3 fe       	sbrs	r13, 3
 566:	07 c0       	rjmp	.+14     	; 0x576 <vfprintf+0x1a0>
 568:	1a c0       	rjmp	.+52     	; 0x59e <vfprintf+0x1c8>
 56a:	b3 01       	movw	r22, r6
 56c:	80 e2       	ldi	r24, 0x20	; 32
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <fputc>
 574:	ca 94       	dec	r12
 576:	8c 2d       	mov	r24, r12
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	08 17       	cp	r16, r24
 57c:	19 07       	cpc	r17, r25
 57e:	a8 f3       	brcs	.-22     	; 0x56a <vfprintf+0x194>
 580:	0e c0       	rjmp	.+28     	; 0x59e <vfprintf+0x1c8>
 582:	f7 01       	movw	r30, r14
 584:	d7 fc       	sbrc	r13, 7
 586:	85 91       	lpm	r24, Z+
 588:	d7 fe       	sbrs	r13, 7
 58a:	81 91       	ld	r24, Z+
 58c:	7f 01       	movw	r14, r30
 58e:	b3 01       	movw	r22, r6
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <fputc>
 596:	c1 10       	cpse	r12, r1
 598:	ca 94       	dec	r12
 59a:	01 50       	subi	r16, 0x01	; 1
 59c:	10 40       	sbci	r17, 0x00	; 0
 59e:	01 15       	cp	r16, r1
 5a0:	11 05       	cpc	r17, r1
 5a2:	79 f7       	brne	.-34     	; 0x582 <vfprintf+0x1ac>
 5a4:	ec c0       	rjmp	.+472    	; 0x77e <vfprintf+0x3a8>
 5a6:	94 36       	cpi	r25, 0x64	; 100
 5a8:	11 f0       	breq	.+4      	; 0x5ae <vfprintf+0x1d8>
 5aa:	99 36       	cpi	r25, 0x69	; 105
 5ac:	71 f5       	brne	.+92     	; 0x60a <vfprintf+0x234>
 5ae:	d7 fe       	sbrs	r13, 7
 5b0:	08 c0       	rjmp	.+16     	; 0x5c2 <vfprintf+0x1ec>
 5b2:	f5 01       	movw	r30, r10
 5b4:	e0 80       	ld	r14, Z
 5b6:	f1 80       	ldd	r15, Z+1	; 0x01
 5b8:	02 81       	ldd	r16, Z+2	; 0x02
 5ba:	13 81       	ldd	r17, Z+3	; 0x03
 5bc:	44 e0       	ldi	r20, 0x04	; 4
 5be:	50 e0       	ldi	r21, 0x00	; 0
 5c0:	0a c0       	rjmp	.+20     	; 0x5d6 <vfprintf+0x200>
 5c2:	f5 01       	movw	r30, r10
 5c4:	80 81       	ld	r24, Z
 5c6:	91 81       	ldd	r25, Z+1	; 0x01
 5c8:	7c 01       	movw	r14, r24
 5ca:	00 27       	eor	r16, r16
 5cc:	f7 fc       	sbrc	r15, 7
 5ce:	00 95       	com	r16
 5d0:	10 2f       	mov	r17, r16
 5d2:	42 e0       	ldi	r20, 0x02	; 2
 5d4:	50 e0       	ldi	r21, 0x00	; 0
 5d6:	a4 0e       	add	r10, r20
 5d8:	b5 1e       	adc	r11, r21
 5da:	5f e6       	ldi	r21, 0x6F	; 111
 5dc:	d5 22       	and	r13, r21
 5de:	17 ff       	sbrs	r17, 7
 5e0:	0a c0       	rjmp	.+20     	; 0x5f6 <vfprintf+0x220>
 5e2:	10 95       	com	r17
 5e4:	00 95       	com	r16
 5e6:	f0 94       	com	r15
 5e8:	e0 94       	com	r14
 5ea:	e1 1c       	adc	r14, r1
 5ec:	f1 1c       	adc	r15, r1
 5ee:	01 1d       	adc	r16, r1
 5f0:	11 1d       	adc	r17, r1
 5f2:	80 e8       	ldi	r24, 0x80	; 128
 5f4:	d8 2a       	or	r13, r24
 5f6:	2a e0       	ldi	r18, 0x0A	; 10
 5f8:	30 e0       	ldi	r19, 0x00	; 0
 5fa:	a1 01       	movw	r20, r2
 5fc:	c8 01       	movw	r24, r16
 5fe:	b7 01       	movw	r22, r14
 600:	0e 94 0c 04 	call	0x818	; 0x818 <__ultoa_invert>
 604:	f8 2e       	mov	r15, r24
 606:	f2 18       	sub	r15, r2
 608:	40 c0       	rjmp	.+128    	; 0x68a <vfprintf+0x2b4>
 60a:	95 37       	cpi	r25, 0x75	; 117
 60c:	29 f4       	brne	.+10     	; 0x618 <vfprintf+0x242>
 60e:	1d 2d       	mov	r17, r13
 610:	1f 7e       	andi	r17, 0xEF	; 239
 612:	2a e0       	ldi	r18, 0x0A	; 10
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	1d c0       	rjmp	.+58     	; 0x652 <vfprintf+0x27c>
 618:	1d 2d       	mov	r17, r13
 61a:	19 7f       	andi	r17, 0xF9	; 249
 61c:	9f 36       	cpi	r25, 0x6F	; 111
 61e:	61 f0       	breq	.+24     	; 0x638 <vfprintf+0x262>
 620:	90 37       	cpi	r25, 0x70	; 112
 622:	20 f4       	brcc	.+8      	; 0x62c <vfprintf+0x256>
 624:	98 35       	cpi	r25, 0x58	; 88
 626:	09 f0       	breq	.+2      	; 0x62a <vfprintf+0x254>
 628:	ad c0       	rjmp	.+346    	; 0x784 <vfprintf+0x3ae>
 62a:	0f c0       	rjmp	.+30     	; 0x64a <vfprintf+0x274>
 62c:	90 37       	cpi	r25, 0x70	; 112
 62e:	39 f0       	breq	.+14     	; 0x63e <vfprintf+0x268>
 630:	98 37       	cpi	r25, 0x78	; 120
 632:	09 f0       	breq	.+2      	; 0x636 <vfprintf+0x260>
 634:	a7 c0       	rjmp	.+334    	; 0x784 <vfprintf+0x3ae>
 636:	04 c0       	rjmp	.+8      	; 0x640 <vfprintf+0x26a>
 638:	28 e0       	ldi	r18, 0x08	; 8
 63a:	30 e0       	ldi	r19, 0x00	; 0
 63c:	0a c0       	rjmp	.+20     	; 0x652 <vfprintf+0x27c>
 63e:	10 61       	ori	r17, 0x10	; 16
 640:	14 fd       	sbrc	r17, 4
 642:	14 60       	ori	r17, 0x04	; 4
 644:	20 e1       	ldi	r18, 0x10	; 16
 646:	30 e0       	ldi	r19, 0x00	; 0
 648:	04 c0       	rjmp	.+8      	; 0x652 <vfprintf+0x27c>
 64a:	14 fd       	sbrc	r17, 4
 64c:	16 60       	ori	r17, 0x06	; 6
 64e:	20 e1       	ldi	r18, 0x10	; 16
 650:	32 e0       	ldi	r19, 0x02	; 2
 652:	17 ff       	sbrs	r17, 7
 654:	08 c0       	rjmp	.+16     	; 0x666 <vfprintf+0x290>
 656:	f5 01       	movw	r30, r10
 658:	60 81       	ld	r22, Z
 65a:	71 81       	ldd	r23, Z+1	; 0x01
 65c:	82 81       	ldd	r24, Z+2	; 0x02
 65e:	93 81       	ldd	r25, Z+3	; 0x03
 660:	44 e0       	ldi	r20, 0x04	; 4
 662:	50 e0       	ldi	r21, 0x00	; 0
 664:	08 c0       	rjmp	.+16     	; 0x676 <vfprintf+0x2a0>
 666:	f5 01       	movw	r30, r10
 668:	80 81       	ld	r24, Z
 66a:	91 81       	ldd	r25, Z+1	; 0x01
 66c:	bc 01       	movw	r22, r24
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	42 e0       	ldi	r20, 0x02	; 2
 674:	50 e0       	ldi	r21, 0x00	; 0
 676:	a4 0e       	add	r10, r20
 678:	b5 1e       	adc	r11, r21
 67a:	a1 01       	movw	r20, r2
 67c:	0e 94 0c 04 	call	0x818	; 0x818 <__ultoa_invert>
 680:	f8 2e       	mov	r15, r24
 682:	f2 18       	sub	r15, r2
 684:	8f e7       	ldi	r24, 0x7F	; 127
 686:	d8 2e       	mov	r13, r24
 688:	d1 22       	and	r13, r17
 68a:	d6 fe       	sbrs	r13, 6
 68c:	0b c0       	rjmp	.+22     	; 0x6a4 <vfprintf+0x2ce>
 68e:	5e ef       	ldi	r21, 0xFE	; 254
 690:	d5 22       	and	r13, r21
 692:	f9 14       	cp	r15, r9
 694:	38 f4       	brcc	.+14     	; 0x6a4 <vfprintf+0x2ce>
 696:	d4 fe       	sbrs	r13, 4
 698:	07 c0       	rjmp	.+14     	; 0x6a8 <vfprintf+0x2d2>
 69a:	d2 fc       	sbrc	r13, 2
 69c:	05 c0       	rjmp	.+10     	; 0x6a8 <vfprintf+0x2d2>
 69e:	8f ee       	ldi	r24, 0xEF	; 239
 6a0:	d8 22       	and	r13, r24
 6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <vfprintf+0x2d2>
 6a4:	1f 2d       	mov	r17, r15
 6a6:	01 c0       	rjmp	.+2      	; 0x6aa <vfprintf+0x2d4>
 6a8:	19 2d       	mov	r17, r9
 6aa:	d4 fe       	sbrs	r13, 4
 6ac:	0d c0       	rjmp	.+26     	; 0x6c8 <vfprintf+0x2f2>
 6ae:	fe 01       	movw	r30, r28
 6b0:	ef 0d       	add	r30, r15
 6b2:	f1 1d       	adc	r31, r1
 6b4:	80 81       	ld	r24, Z
 6b6:	80 33       	cpi	r24, 0x30	; 48
 6b8:	19 f4       	brne	.+6      	; 0x6c0 <vfprintf+0x2ea>
 6ba:	99 ee       	ldi	r25, 0xE9	; 233
 6bc:	d9 22       	and	r13, r25
 6be:	08 c0       	rjmp	.+16     	; 0x6d0 <vfprintf+0x2fa>
 6c0:	1f 5f       	subi	r17, 0xFF	; 255
 6c2:	d2 fe       	sbrs	r13, 2
 6c4:	05 c0       	rjmp	.+10     	; 0x6d0 <vfprintf+0x2fa>
 6c6:	03 c0       	rjmp	.+6      	; 0x6ce <vfprintf+0x2f8>
 6c8:	8d 2d       	mov	r24, r13
 6ca:	86 78       	andi	r24, 0x86	; 134
 6cc:	09 f0       	breq	.+2      	; 0x6d0 <vfprintf+0x2fa>
 6ce:	1f 5f       	subi	r17, 0xFF	; 255
 6d0:	0d 2d       	mov	r16, r13
 6d2:	d3 fc       	sbrc	r13, 3
 6d4:	14 c0       	rjmp	.+40     	; 0x6fe <vfprintf+0x328>
 6d6:	d0 fe       	sbrs	r13, 0
 6d8:	0f c0       	rjmp	.+30     	; 0x6f8 <vfprintf+0x322>
 6da:	1c 15       	cp	r17, r12
 6dc:	10 f0       	brcs	.+4      	; 0x6e2 <vfprintf+0x30c>
 6de:	9f 2c       	mov	r9, r15
 6e0:	0b c0       	rjmp	.+22     	; 0x6f8 <vfprintf+0x322>
 6e2:	9f 2c       	mov	r9, r15
 6e4:	9c 0c       	add	r9, r12
 6e6:	91 1a       	sub	r9, r17
 6e8:	1c 2d       	mov	r17, r12
 6ea:	06 c0       	rjmp	.+12     	; 0x6f8 <vfprintf+0x322>
 6ec:	b3 01       	movw	r22, r6
 6ee:	80 e2       	ldi	r24, 0x20	; 32
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <fputc>
 6f6:	1f 5f       	subi	r17, 0xFF	; 255
 6f8:	1c 15       	cp	r17, r12
 6fa:	c0 f3       	brcs	.-16     	; 0x6ec <vfprintf+0x316>
 6fc:	04 c0       	rjmp	.+8      	; 0x706 <vfprintf+0x330>
 6fe:	1c 15       	cp	r17, r12
 700:	10 f4       	brcc	.+4      	; 0x706 <vfprintf+0x330>
 702:	c1 1a       	sub	r12, r17
 704:	01 c0       	rjmp	.+2      	; 0x708 <vfprintf+0x332>
 706:	cc 24       	eor	r12, r12
 708:	04 ff       	sbrs	r16, 4
 70a:	10 c0       	rjmp	.+32     	; 0x72c <vfprintf+0x356>
 70c:	b3 01       	movw	r22, r6
 70e:	80 e3       	ldi	r24, 0x30	; 48
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <fputc>
 716:	02 ff       	sbrs	r16, 2
 718:	1e c0       	rjmp	.+60     	; 0x756 <vfprintf+0x380>
 71a:	01 fd       	sbrc	r16, 1
 71c:	03 c0       	rjmp	.+6      	; 0x724 <vfprintf+0x34e>
 71e:	88 e7       	ldi	r24, 0x78	; 120
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	02 c0       	rjmp	.+4      	; 0x728 <vfprintf+0x352>
 724:	88 e5       	ldi	r24, 0x58	; 88
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	b3 01       	movw	r22, r6
 72a:	0c c0       	rjmp	.+24     	; 0x744 <vfprintf+0x36e>
 72c:	80 2f       	mov	r24, r16
 72e:	86 78       	andi	r24, 0x86	; 134
 730:	91 f0       	breq	.+36     	; 0x756 <vfprintf+0x380>
 732:	01 ff       	sbrs	r16, 1
 734:	02 c0       	rjmp	.+4      	; 0x73a <vfprintf+0x364>
 736:	8b e2       	ldi	r24, 0x2B	; 43
 738:	01 c0       	rjmp	.+2      	; 0x73c <vfprintf+0x366>
 73a:	80 e2       	ldi	r24, 0x20	; 32
 73c:	d7 fc       	sbrc	r13, 7
 73e:	8d e2       	ldi	r24, 0x2D	; 45
 740:	b3 01       	movw	r22, r6
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <fputc>
 748:	06 c0       	rjmp	.+12     	; 0x756 <vfprintf+0x380>
 74a:	b3 01       	movw	r22, r6
 74c:	80 e3       	ldi	r24, 0x30	; 48
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <fputc>
 754:	9a 94       	dec	r9
 756:	f9 14       	cp	r15, r9
 758:	c0 f3       	brcs	.-16     	; 0x74a <vfprintf+0x374>
 75a:	fa 94       	dec	r15
 75c:	f1 01       	movw	r30, r2
 75e:	ef 0d       	add	r30, r15
 760:	f1 1d       	adc	r31, r1
 762:	b3 01       	movw	r22, r6
 764:	80 81       	ld	r24, Z
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <fputc>
 76c:	ff 20       	and	r15, r15
 76e:	a9 f7       	brne	.-22     	; 0x75a <vfprintf+0x384>
 770:	06 c0       	rjmp	.+12     	; 0x77e <vfprintf+0x3a8>
 772:	b3 01       	movw	r22, r6
 774:	80 e2       	ldi	r24, 0x20	; 32
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <fputc>
 77c:	ca 94       	dec	r12
 77e:	cc 20       	and	r12, r12
 780:	c1 f7       	brne	.-16     	; 0x772 <vfprintf+0x39c>
 782:	41 ce       	rjmp	.-894    	; 0x406 <vfprintf+0x30>
 784:	f3 01       	movw	r30, r6
 786:	66 81       	ldd	r22, Z+6	; 0x06
 788:	77 81       	ldd	r23, Z+7	; 0x07
 78a:	cb 01       	movw	r24, r22
 78c:	2b 96       	adiw	r28, 0x0b	; 11
 78e:	e2 e1       	ldi	r30, 0x12	; 18
 790:	0c 94 86 04 	jmp	0x90c	; 0x90c <__epilogue_restores__>

00000794 <strnlen_P>:
 794:	fc 01       	movw	r30, r24
 796:	05 90       	lpm	r0, Z+
 798:	61 50       	subi	r22, 0x01	; 1
 79a:	70 40       	sbci	r23, 0x00	; 0
 79c:	01 10       	cpse	r0, r1
 79e:	d8 f7       	brcc	.-10     	; 0x796 <strnlen_P+0x2>
 7a0:	80 95       	com	r24
 7a2:	90 95       	com	r25
 7a4:	8e 0f       	add	r24, r30
 7a6:	9f 1f       	adc	r25, r31
 7a8:	08 95       	ret

000007aa <strnlen>:
 7aa:	fc 01       	movw	r30, r24
 7ac:	61 50       	subi	r22, 0x01	; 1
 7ae:	70 40       	sbci	r23, 0x00	; 0
 7b0:	01 90       	ld	r0, Z+
 7b2:	01 10       	cpse	r0, r1
 7b4:	d8 f7       	brcc	.-10     	; 0x7ac <strnlen+0x2>
 7b6:	80 95       	com	r24
 7b8:	90 95       	com	r25
 7ba:	8e 0f       	add	r24, r30
 7bc:	9f 1f       	adc	r25, r31
 7be:	08 95       	ret

000007c0 <fputc>:
 7c0:	0f 93       	push	r16
 7c2:	1f 93       	push	r17
 7c4:	cf 93       	push	r28
 7c6:	df 93       	push	r29
 7c8:	8c 01       	movw	r16, r24
 7ca:	eb 01       	movw	r28, r22
 7cc:	8b 81       	ldd	r24, Y+3	; 0x03
 7ce:	81 ff       	sbrs	r24, 1
 7d0:	1b c0       	rjmp	.+54     	; 0x808 <fputc+0x48>
 7d2:	82 ff       	sbrs	r24, 2
 7d4:	0d c0       	rjmp	.+26     	; 0x7f0 <fputc+0x30>
 7d6:	2e 81       	ldd	r18, Y+6	; 0x06
 7d8:	3f 81       	ldd	r19, Y+7	; 0x07
 7da:	8c 81       	ldd	r24, Y+4	; 0x04
 7dc:	9d 81       	ldd	r25, Y+5	; 0x05
 7de:	28 17       	cp	r18, r24
 7e0:	39 07       	cpc	r19, r25
 7e2:	64 f4       	brge	.+24     	; 0x7fc <fputc+0x3c>
 7e4:	e8 81       	ld	r30, Y
 7e6:	f9 81       	ldd	r31, Y+1	; 0x01
 7e8:	01 93       	st	Z+, r16
 7ea:	f9 83       	std	Y+1, r31	; 0x01
 7ec:	e8 83       	st	Y, r30
 7ee:	06 c0       	rjmp	.+12     	; 0x7fc <fputc+0x3c>
 7f0:	e8 85       	ldd	r30, Y+8	; 0x08
 7f2:	f9 85       	ldd	r31, Y+9	; 0x09
 7f4:	80 2f       	mov	r24, r16
 7f6:	09 95       	icall
 7f8:	89 2b       	or	r24, r25
 7fa:	31 f4       	brne	.+12     	; 0x808 <fputc+0x48>
 7fc:	8e 81       	ldd	r24, Y+6	; 0x06
 7fe:	9f 81       	ldd	r25, Y+7	; 0x07
 800:	01 96       	adiw	r24, 0x01	; 1
 802:	9f 83       	std	Y+7, r25	; 0x07
 804:	8e 83       	std	Y+6, r24	; 0x06
 806:	02 c0       	rjmp	.+4      	; 0x80c <fputc+0x4c>
 808:	0f ef       	ldi	r16, 0xFF	; 255
 80a:	1f ef       	ldi	r17, 0xFF	; 255
 80c:	c8 01       	movw	r24, r16
 80e:	df 91       	pop	r29
 810:	cf 91       	pop	r28
 812:	1f 91       	pop	r17
 814:	0f 91       	pop	r16
 816:	08 95       	ret

00000818 <__ultoa_invert>:
 818:	fa 01       	movw	r30, r20
 81a:	aa 27       	eor	r26, r26
 81c:	28 30       	cpi	r18, 0x08	; 8
 81e:	51 f1       	breq	.+84     	; 0x874 <__ultoa_invert+0x5c>
 820:	20 31       	cpi	r18, 0x10	; 16
 822:	81 f1       	breq	.+96     	; 0x884 <__ultoa_invert+0x6c>
 824:	e8 94       	clt
 826:	6f 93       	push	r22
 828:	6e 7f       	andi	r22, 0xFE	; 254
 82a:	6e 5f       	subi	r22, 0xFE	; 254
 82c:	7f 4f       	sbci	r23, 0xFF	; 255
 82e:	8f 4f       	sbci	r24, 0xFF	; 255
 830:	9f 4f       	sbci	r25, 0xFF	; 255
 832:	af 4f       	sbci	r26, 0xFF	; 255
 834:	b1 e0       	ldi	r27, 0x01	; 1
 836:	3e d0       	rcall	.+124    	; 0x8b4 <__ultoa_invert+0x9c>
 838:	b4 e0       	ldi	r27, 0x04	; 4
 83a:	3c d0       	rcall	.+120    	; 0x8b4 <__ultoa_invert+0x9c>
 83c:	67 0f       	add	r22, r23
 83e:	78 1f       	adc	r23, r24
 840:	89 1f       	adc	r24, r25
 842:	9a 1f       	adc	r25, r26
 844:	a1 1d       	adc	r26, r1
 846:	68 0f       	add	r22, r24
 848:	79 1f       	adc	r23, r25
 84a:	8a 1f       	adc	r24, r26
 84c:	91 1d       	adc	r25, r1
 84e:	a1 1d       	adc	r26, r1
 850:	6a 0f       	add	r22, r26
 852:	71 1d       	adc	r23, r1
 854:	81 1d       	adc	r24, r1
 856:	91 1d       	adc	r25, r1
 858:	a1 1d       	adc	r26, r1
 85a:	20 d0       	rcall	.+64     	; 0x89c <__ultoa_invert+0x84>
 85c:	09 f4       	brne	.+2      	; 0x860 <__ultoa_invert+0x48>
 85e:	68 94       	set
 860:	3f 91       	pop	r19
 862:	2a e0       	ldi	r18, 0x0A	; 10
 864:	26 9f       	mul	r18, r22
 866:	11 24       	eor	r1, r1
 868:	30 19       	sub	r19, r0
 86a:	30 5d       	subi	r19, 0xD0	; 208
 86c:	31 93       	st	Z+, r19
 86e:	de f6       	brtc	.-74     	; 0x826 <__ultoa_invert+0xe>
 870:	cf 01       	movw	r24, r30
 872:	08 95       	ret
 874:	46 2f       	mov	r20, r22
 876:	47 70       	andi	r20, 0x07	; 7
 878:	40 5d       	subi	r20, 0xD0	; 208
 87a:	41 93       	st	Z+, r20
 87c:	b3 e0       	ldi	r27, 0x03	; 3
 87e:	0f d0       	rcall	.+30     	; 0x89e <__ultoa_invert+0x86>
 880:	c9 f7       	brne	.-14     	; 0x874 <__ultoa_invert+0x5c>
 882:	f6 cf       	rjmp	.-20     	; 0x870 <__ultoa_invert+0x58>
 884:	46 2f       	mov	r20, r22
 886:	4f 70       	andi	r20, 0x0F	; 15
 888:	40 5d       	subi	r20, 0xD0	; 208
 88a:	4a 33       	cpi	r20, 0x3A	; 58
 88c:	18 f0       	brcs	.+6      	; 0x894 <__ultoa_invert+0x7c>
 88e:	49 5d       	subi	r20, 0xD9	; 217
 890:	31 fd       	sbrc	r19, 1
 892:	40 52       	subi	r20, 0x20	; 32
 894:	41 93       	st	Z+, r20
 896:	02 d0       	rcall	.+4      	; 0x89c <__ultoa_invert+0x84>
 898:	a9 f7       	brne	.-22     	; 0x884 <__ultoa_invert+0x6c>
 89a:	ea cf       	rjmp	.-44     	; 0x870 <__ultoa_invert+0x58>
 89c:	b4 e0       	ldi	r27, 0x04	; 4
 89e:	a6 95       	lsr	r26
 8a0:	97 95       	ror	r25
 8a2:	87 95       	ror	r24
 8a4:	77 95       	ror	r23
 8a6:	67 95       	ror	r22
 8a8:	ba 95       	dec	r27
 8aa:	c9 f7       	brne	.-14     	; 0x89e <__ultoa_invert+0x86>
 8ac:	00 97       	sbiw	r24, 0x00	; 0
 8ae:	61 05       	cpc	r22, r1
 8b0:	71 05       	cpc	r23, r1
 8b2:	08 95       	ret
 8b4:	9b 01       	movw	r18, r22
 8b6:	ac 01       	movw	r20, r24
 8b8:	0a 2e       	mov	r0, r26
 8ba:	06 94       	lsr	r0
 8bc:	57 95       	ror	r21
 8be:	47 95       	ror	r20
 8c0:	37 95       	ror	r19
 8c2:	27 95       	ror	r18
 8c4:	ba 95       	dec	r27
 8c6:	c9 f7       	brne	.-14     	; 0x8ba <__ultoa_invert+0xa2>
 8c8:	62 0f       	add	r22, r18
 8ca:	73 1f       	adc	r23, r19
 8cc:	84 1f       	adc	r24, r20
 8ce:	95 1f       	adc	r25, r21
 8d0:	a0 1d       	adc	r26, r0
 8d2:	08 95       	ret

000008d4 <__prologue_saves__>:
 8d4:	2f 92       	push	r2
 8d6:	3f 92       	push	r3
 8d8:	4f 92       	push	r4
 8da:	5f 92       	push	r5
 8dc:	6f 92       	push	r6
 8de:	7f 92       	push	r7
 8e0:	8f 92       	push	r8
 8e2:	9f 92       	push	r9
 8e4:	af 92       	push	r10
 8e6:	bf 92       	push	r11
 8e8:	cf 92       	push	r12
 8ea:	df 92       	push	r13
 8ec:	ef 92       	push	r14
 8ee:	ff 92       	push	r15
 8f0:	0f 93       	push	r16
 8f2:	1f 93       	push	r17
 8f4:	cf 93       	push	r28
 8f6:	df 93       	push	r29
 8f8:	cd b7       	in	r28, 0x3d	; 61
 8fa:	de b7       	in	r29, 0x3e	; 62
 8fc:	ca 1b       	sub	r28, r26
 8fe:	db 0b       	sbc	r29, r27
 900:	0f b6       	in	r0, 0x3f	; 63
 902:	f8 94       	cli
 904:	de bf       	out	0x3e, r29	; 62
 906:	0f be       	out	0x3f, r0	; 63
 908:	cd bf       	out	0x3d, r28	; 61
 90a:	09 94       	ijmp

0000090c <__epilogue_restores__>:
 90c:	2a 88       	ldd	r2, Y+18	; 0x12
 90e:	39 88       	ldd	r3, Y+17	; 0x11
 910:	48 88       	ldd	r4, Y+16	; 0x10
 912:	5f 84       	ldd	r5, Y+15	; 0x0f
 914:	6e 84       	ldd	r6, Y+14	; 0x0e
 916:	7d 84       	ldd	r7, Y+13	; 0x0d
 918:	8c 84       	ldd	r8, Y+12	; 0x0c
 91a:	9b 84       	ldd	r9, Y+11	; 0x0b
 91c:	aa 84       	ldd	r10, Y+10	; 0x0a
 91e:	b9 84       	ldd	r11, Y+9	; 0x09
 920:	c8 84       	ldd	r12, Y+8	; 0x08
 922:	df 80       	ldd	r13, Y+7	; 0x07
 924:	ee 80       	ldd	r14, Y+6	; 0x06
 926:	fd 80       	ldd	r15, Y+5	; 0x05
 928:	0c 81       	ldd	r16, Y+4	; 0x04
 92a:	1b 81       	ldd	r17, Y+3	; 0x03
 92c:	aa 81       	ldd	r26, Y+2	; 0x02
 92e:	b9 81       	ldd	r27, Y+1	; 0x01
 930:	ce 0f       	add	r28, r30
 932:	d1 1d       	adc	r29, r1
 934:	0f b6       	in	r0, 0x3f	; 63
 936:	f8 94       	cli
 938:	de bf       	out	0x3e, r29	; 62
 93a:	0f be       	out	0x3f, r0	; 63
 93c:	cd bf       	out	0x3d, r28	; 61
 93e:	ed 01       	movw	r28, r26
 940:	08 95       	ret

00000942 <_exit>:
 942:	f8 94       	cli

00000944 <__stop_program>:
 944:	ff cf       	rjmp	.-2      	; 0x944 <__stop_program>
